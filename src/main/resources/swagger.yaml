openapi: 3.0.3
info:
  title: Core API
  description: Core API for the Boeing Functional Areas
  version: 1.0.0
  contact:
    name: Boeing
    url: https://localhost.com
  license:
    name: internal
    url: https://localhost.com
servers:
  # Added by API Auto Mocking Plugin
  - url: https://localhost/v1
security:
  - boeing-auth:
      - write
      - read
paths:
  /functionalareas:
    get:
      operationId: getFunctionalAreas
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /functionalareas/tree:
    get:
      operationId: getFunctionalAreasTree
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/treeDepthParam"
  /functionalareas/{functionalAreaId}:
    get:
      operationId: getFunctionalArea
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /functionalareas/{functionalAreaId}/tree:
    get:
      operationId: getFunctionalAreaTree
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/treeDepthParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /functionalareas/{functionalAreaId}/functionalgroups:
    get:
      operationId: getFunctionalGroups
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}:
    get:
      operationId: getFunctionalGroup
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
  /functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/tree:
    get:
      operationId: getFunctionalGroupTree
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/treeDepthParam"
  /functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions:
    get:
      operationId: getFunctions
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
  /functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions/{functionId}:
    get:
      operationId: getFunction
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/functionIdParam"
  /functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions/{functionId}/tree:
    get:
      operationId: getFunctionTree
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/functionIdParam"
      - $ref: "#/components/parameters/treeDepthParam"
  /nodes/{nodeId}:
    parameters:
      - $ref: "#/components/parameters/nodeIdParam"
    get:
      description: "retrieves a specific node"
      operationId: getNode
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    patch:
      description: "update node. returns the node on success"
      operationId: upsertNode
      requestBody:
        description: A valid node for update or creation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResult"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      description: "delete a  node. returns an empty value on success "
      operationId: deleteNode
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /nodes/{nodeId}/move:
    parameters:
      - $ref: "#/components/parameters/nodeIdParam"
    post:
      description: "move a node to a new parent. returns the node on success"
      operationId: moveNode
      requestBody:
        description: A valid node for update or creation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Node"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /nodes/{nodeId}/tree:
    get:
      operationId: getNodeTree
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/treeDepthParam"
      - $ref: "#/components/parameters/nodeIdParam"
components:
  parameters:
    nodeIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionalnodeIdGroupId
      description: id for operations on a specific node
      example: "1234"
    functionalGroupIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionalGroupId
      description: id for the required functionalGroup node
    functionalAreaIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionalAreaId
      description: id for the required functionalArea node
    functionIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionId
      description: id for the required function node
    treeDepthParam:
      in: query
      name: treedepth
      required: false
      schema:
        type: integer
        minimum: 1
        default: 9
      description: how many levels to return. default 3
      example: 2
  responses:
    Success200:
      description: Generic non error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    BadRequest400:
      description: The request could not be processed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Unauthorized401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    NotFound404:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Default4XX:
      description: Client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Default5XX:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
  securitySchemes:
    boeing-auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write: create data
            read: read data
  schemas:
    NodeId:
      type: string
      description: unique db identifier for the node
      example: "123"
    OrderId:
      type: number
      format: double
      description: display order of the node
      example: 10.01
    Empty:
      type: object
      description: An empty object for when there is no data
    ApiResult:
      type: object
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/Error"
            - $ref: "#/components/schemas/Empty"
            - $ref: "#/components/schemas/Tree"
            - $ref: "#/components/schemas/Node"
            - $ref: "#/components/schemas/NodeList"
          description: API schema object
        succeeded:
          type: boolean
      required:
        - succeeded
        - data
    Error:
      type: object
      properties:
        status:
          oneOf:
            - type: integer
              format: int32
              description: HTTP status code
            - type: string
              description: API error code
        message:
          type: string
          description: error message
      required:
        - status
        - message
      example:
        status: "DAL1002"
        message: "Data Request Error "
    Node:
      type: object
      properties:
        dbId:
          type: string
          readOnly: true
          nullable: true
          description: unique db identifier for the node. Not there for new nodes
        id:
          type: string
          description: unique id for the node
        labels:
          type: array
          items:
            type: string
          description: list of labels for the node
        orderId:
          type: number
          format: double
          description: display order of the node
      description: "A discrete value object from the database"
      example:
        dbId: "123"
        labels: ["functionalArea"]
        orderId: 1.01
      required:
        - id
        - labels
    NodeList:
      type: object
      properties:
        nodes:
          oneOf:
            - type: array
              items:
                $ref: "#/components/schemas/Node"
            - $ref: "#/components/schemas/Empty"
      description: List of Node objects
    Relationship:
      type: object
      properties:
        dbId:
          $ref: "#/components/schemas/NodeId"
        label:
          type: string
          description: label for the relationship
      required:
        - dbId
        - label
    RelationshipList:
      type: object
      properties:
        relationships:
          oneOf:
            - type: array
              items:
                $ref: "#/components/schemas/Relationship"
            - $ref: "#/components/schemas/Empty"
      description: result with multiple Node objects
    Tree:
      type: object
      properties:
        nodes:
          $ref: "#/components/schemas/NodeList"
        relationships:
          $ref: "#/components/schemas/RelationshipList"
    MoveNodeInfo:
      type: object
      properties:
        dbId:
          $ref: "#/components/schemas/NodeId"
        newParentDbId:
          $ref: "#/components/schemas/NodeId"
        newOrderId:
          $ref: "#/components/schemas/OrderId"
      required:
        - dbId
        - newParentDbId
