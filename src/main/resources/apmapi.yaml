openapi: 3.0.3
info:
  title: Core API
  description: Core API for the Boeing Functional Areas
  version: 1.0.0
  contact:
    name: Boeing
    url: https://localhost.com
  license:
    name: internal
    url: https://localhost.com
servers:
  # Added by API Auto Mocking Plugin
  - url: https://localhost/v1
    description: ""
security:
  - boeing-auth:
      - write
      - read
paths:
  /clients:
    get:
      operationId: getClients
      description: "retrieves a list of clients. Boeing only"
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /clients/graph:
    get:
      operationId: getClientsGraph
      description: "retrieves clients and the engagements for all clients - those two levels only. Boeing only"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /clients/{clientId}: 
    get:
      operationId: getClient
      description: "retrieves a specific client. Boeing only"
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
  /clients/{clientId}/graph:
    get:
      operationId: getClientGraph
      description: "retrieves client and client engagements - those two levels only. Boeing only"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
  /clients/{clientId}/engagements:
    get:
      operationId: getClientEngagements
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
  /clients/{clientId}/engagements/{engagementId}:
    get:
      operationId: getClientEngagement
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas:
    get:
      operationId: getFunctionalAreas
      responses:
        200:
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/graph:
    get:
      operationId: getFunctionalAreasGraph
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/graphDepthParam"
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}:
    get:
      operationId: getFunctionalArea
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/graph:
    get:
      operationId: getFunctionalAreaGraph
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/graphDepthParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups:
    get:
      operationId: getFunctionalGroups
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}:
    get:
      operationId: getFunctionalGroup
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/graph:
    get:
      operationId: getFunctionalGroupGraph
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/graphDepthParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions:
    get:
      operationId: getFunctions
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions/{functionId}:
    get:
      operationId: getFunction
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/functionIdParam"
  /clients/{clientId}/engagements/{engagementId}/functionalareas/{functionalAreaId}/functionalgroups/{functionalGroupId}/functions/{functionId}/graph:
    get:
      operationId: getFunctionGraph
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/functionalAreaIdParam"
      - $ref: "#/components/parameters/functionalGroupIdParam"
      - $ref: "#/components/parameters/functionIdParam"
      - $ref: "#/components/parameters/graphDepthParam"
  /clients/{clientId}/engagements/{engagementId}/nodes/{nodeId}:
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/nodeIdParam"
    get:
      description: "retrieves a specific node"
      operationId: getNode
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    patch:
      description: "update node. returns the node on success"
      operationId: upsertNode
      requestBody:
        description: A valid node for update or creation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResult"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    delete:
      description: "delete a  node. returns an empty value on success "
      operationId: deleteNode
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /clients/{clientId}/engagements/{engagementId}/nodes/{nodeId}/move:
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/nodeIdParam"
    post:
      description: "move a node to a new parent. returns the node on success"
      operationId: moveNode
      requestBody:
        description: A valid node for update or creation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveNodeInfo"
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
  /clients/{clientId}/engagements/{engagementId}/nodes/{nodeId}/graph:
    get:
      operationId: getNodeGraph
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResult"
    parameters:
      - $ref: "#/components/parameters/clientIdParam"
      - $ref: "#/components/parameters/engagementIdParam"
      - $ref: "#/components/parameters/graphDepthParam"
      - $ref: "#/components/parameters/nodeIdParam"
components:
  parameters:
    clientIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: clientId
      description: id for operations on a specific client
      example: "1234"
    engagementIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: engagementId
      description: id for operations on a specific engagement
      example: "1234"
    nodeIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: nodeId
      description: id for operations on a specific node
      example: "1234"
    functionalGroupIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionalGroupId
      description: id for the required functionalGroup node
    functionalAreaIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionalAreaId
      description: id for the required functionalArea node
    functionIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: functionId
      description: id for the required function node
    graphDepthParam:
      in: query
      name: graphdepth
      required: false
      schema:
        type: integer
        minimum: 1
        default: 9
      description: how many levels to return. default 3
      example: 2
    noteIdParam:
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/NodeId"
      name: noteId
      description: id for the required note
  responses:
    Success200:
      description: Generic non error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    BadRequest400:
      description: The request could not be processed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Unauthorized401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    NotFound404:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Default4XX:
      description: Client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
    Default5XX:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResult"
  securitySchemes:
    boeing-auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/api/oauth/dialog
          scopes:
            write: create data
            read: read data
  schemas:
    NodeId:
      type: string
      pattern: |
        "^'[0-9]+\.[A-Z]{3}\.[0-9]+\.[0-9]+\.[0-9]+\.*[0-9]*"
      description: used for identifiers of a node. Must match the pattern where the 3 letter alpha code matches a node type enum
      readOnly: true
      example: "1.UNK.1.2.33.44444"
    SortId:
      type: integer
      readOnly: true
      description: display order of the node
      example: 2
    Empty:
      type: object
      description: An empty object for when there is no data
      properties:
        typeName:
          type: string
          description: "Name of the type"
          default: "Empty"
      required:
        - typeName
    ApiResult:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Payload"
        succeeded:
          type: boolean
      required:
        - succeeded
        - data
    Payload:
      type: object
      discriminator:
        propertyName: typeName
        mapping: 
          CVV: "#/components/schemas/ClientNode"
          EVV: "#/components/schemas/EngagementNode"
          FNA: "#/components/schemas/ApmFnaNode"
          FNG: "#/components/schemas/ApmFngNode"
          FNC: "#/components/schemas/ApmFncNode"
          TKK: "#/components/schemas/ApmTaskNode"
          NTT: "#/components/schemas/ApmNote"
          Graph: "#/components/schemas/Graph"
          NodeList: "#/components/schemas/NodeList"
          Empty: "#/components/schemas/Empty"
          Error: "#/components/schemas/Error"
      oneOf:
        - $ref: "#/components/schemas/NodeList"
        - $ref: "#/components/schemas/Graph"
        - $ref: "#/components/schemas/Empty"
        - $ref: "#/components/schemas/Error"
        - $ref: "#/components/schemas/ApmNote"
        - $ref: "#/components/schemas/ApmTaskNode"
        - $ref: "#/components/schemas/ClientNode"
        - $ref: "#/components/schemas/EngagementNode"
        - $ref: "#/components/schemas/SaveVersionNode"
        - $ref: "#/components/schemas/ApmFnaNode"
        - $ref: "#/components/schemas/ApmFngNode"
        - $ref: "#/components/schemas/ApmFncNode"
      description: Container for return values
    Error:
      type: object
      properties:
        typeName:
          type: string
          description: "Name of the error type"
          default: "Error"
        status:
          oneOf:
            - type: integer
              format: int32
              description: HTTP status code
            - type: string
              description: API error code
        message:
          type: string
          description: error message
      required:
        - status
        - message
        - typeName
      example:
        status: "DAL1002"
        message: "Data Request Error "
    Node:
      type: object
      properties:
        typeName:
          $ref: "#/components/schemas/NodeTypes"
        dbId:
          type: string
          readOnly: true
          description: db system id for the node
        nodeId:
          $ref: "#/components/schemas/NodeId"
        labels:
          type: array
          items:
            type: string
          description: list of labels for the node
      additionalProperties: true
      description: "A discrete value object from the database with base required values and addtional key/value property pairs."
      example:
        typeName: "FNA"
        dbId: "123"
        labels: ["functionalArea"]
        orderId: 1
      required:
        - typeName
        - labels
        - nodeId
    ApmNode:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        apmId:
          type: string
          description: apm system id for the node
          readOnly: false
        sort:
          $ref: "#/components/schemas/SortId"
        ampTitle:
          type: string
          description: title for the node
        isDeleted:
          type: boolean
          description: is the node deleted
      required:
        - apmId
        - sort
    ClientNode:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        typeName:
          type: string
          default: CVV
        name:
          type: string
          nullable: false
      required:
        - typeName
        - name
    EngagementNode:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        typeName:
          type: string
          default: EVV
        engagementVersion:
          type: integer
          nullable: false
        boeingApmVersion:
          type: string
          nullable: false
        createDate:
          type: string
          format: date-time
          nullable: false
        createBy:
          $ref: "#/components/schemas/NodeId"
        isCurrent:
          type: boolean
          nullable: false
          default: true
      required:
        - typeName
        - engagementVersion
        - boeingApmVersion
        - createDate
        - createBy
        - isCurrent
    SaveVersionNode:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        typeName:
          type: string
          default: EVV
        saveVersion:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        createDate:
          type: string
          format: date-time
          nullable: false
        createBy:
          $ref: "#/components/schemas/NodeId"
        isCurrent:
          type: boolean
          nullable: false
          default: true
      required:
        - typeName
        - saveVersion
        - name
        - createDate
        - createBy
        - isCurrent
    ApmFnaNode:
      allOf:
        - $ref: "#/components/schemas/ApmNode"
      type: object
      properties:
        typeName:
          type: string
          default: FNA
      required:
        - typeName
    ApmFngNode:
      allOf:
        - $ref: "#/components/schemas/ApmNode"
      type: object
      properties:
        typeName:
          type: string
          default: FNG
      required:
        - typeName
    ApmFncNode:
      allOf:
        - $ref: "#/components/schemas/ApmNode"
      type: object
      properties:
        typeName:
          type: string
          default: FNC
        ampDesc:
          type: string
          nullable: false
          default: ""
      required:
        - typeName
    NodeList:
      type: object
      properties:
        typeName:
          type: string
          description: "type of the nodes in the list"
          default: "GenericNodeList"
        values:
          type: array
          items:
            $ref: "#/components/schemas/Node"
          description: List of Node objects
      required:
        - typeName
    Relationship:
      type: object
      properties:
        dbId:
          $ref: "#/components/schemas/NodeId"
        label:
          type: string
          description: label for the relationship
      required:
        - dbId
        - label
    RelationshipList:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/Relationship"
      description: result with multiple Relationship objects
    Graph:
      type: object
      properties:
        typeName:
          type: string
          description: "Name of the graph type"
          default: "Graph"
        nodes:
          $ref: "#/components/schemas/NodeList"
        relationships:
          $ref: "#/components/schemas/RelationshipList"
      required:
        - typeName
        - nodes
        - relationships
    ApmNote:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        typeName:
          type: string
          default: NTT
        text:
          type: string
          description: note for the node
        createDate:
          type: string
          format: date-time
          description: date the node was created
        createBy:
          $ref: "#/components/schemas/NodeId"
        isDeleted:
          type: boolean
          description: if node is marked for deletion
      required:
        - typeName
    ApmTaskNode:
      allOf:
        - $ref: "#/components/schemas/Node"
      type: object
      properties:
        typeName:
          type: string
          default: TKK
        text:
          type: string
          description: note for the node
        createDate:
          type: string
          format: date-time
          description: date the node was created
        createBy:
          $ref: "#/components/schemas/NodeId"
        isDeleted:
          type: string
          description: user who created the node
      required:
        - typeName
    MoveNodeInfo:
      type: object
      properties:
        dbId:
          $ref: "#/components/schemas/NodeId"
        newParentDbId:
          $ref: "#/components/schemas/NodeId"
      required:
        - dbId
        - newParentDbId
    NodeTypes:
      type: string
      enum:
        - CVV # Client
        - EVV # Engagement
        - FNA # Functional Area
        - FNG # Functional Group
        - FNC # Function
        - TKK # Task
        - NTT # Note
        - COM # Comment
        - TGT # TagTool
        - TGS # TagSystem
        - TGM # TagMisc
        - UNK # GenericNode
        - Empty # Empty 
        - Error # Error
        - Graph # Graph
        - NodeList # NodeList
      description: "Name of the node type - primary label/DTO type name. for unknown or mixed list items use GenericNode"
      default: "UNK"
